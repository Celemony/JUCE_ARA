/**
@page downloading_the_sdk Downloading the SDK

@section writing_littlefoot_scripts Writing scripts using the LittleFoot language

If your goal is to develop simple scripts that can be loaded onto the BLOCKS hardware and run independently from a host application, you should read about @ref the_littlefoot_language. To get started quickly, you can download the BLOCKS CODE IDE @blockscode{here} and write all your LittleFoot code in there. BLOCKS CODE is designed to work seemlessly with BLOCKS hardware and allow you to compile and upload LittleFoot scripts to BLOCKS instantly.
More details are provided in @ref the_littlefoot_language and @ref example_scripts sections.

@section integrating_blocks_sdk Integrating BLOCKS SDK into existing applications

You can also download the standalone BLOCKS SDK from GitHub @blocksgithub{here}.
This is a stripped down version of what JUCE provides, including only the features required for the SDK.
Using this version of the SDK is much more complicated but may be more suitable for integrating BLOCKS into an existing application.
More details are provided in @ref the_standalone_blocks_sdk and @ref example_integrations sections.

@section building_blocks_applications Building BLOCKS applications using JUCE

The BLOCKS SDK is distributed as part of the @jucelink{JUCE framework}, which can be obtained from GitHub @jucegithub{here}.
The JUCE repository also contains the code for the @ref example_applications, which require the JUCE framework to compile.
Whilst you don't need to know anything about JUCE to build the examples using the supplied Visual Studio/Xcode/Makefile projects, it will probably be worthwhile reading some JUCE tutorials, which can be found @jucetutorials{here}.

Learn how to connect BLOCKS in the @ref connecting_blocks section or start discovering BLOCKS in your applications by jumping to the @ref discovering_blocks section.
*/
